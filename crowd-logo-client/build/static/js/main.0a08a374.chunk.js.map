{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["socket","io","App","props","state","canvasAttrs","brushColor","lineWidth","canvasStyle","backgroundColor","clear","name","otherDrawings","clearCanvas","bind","addDrawing","submitDrawing","componentDidMount","handleNameChange","on","console","log","drawing","newDrawing","this","concat","setState","colorName","newState","img","document","querySelector","toDataURL","userDrawing","emit","e","target","value","className","Brand","position","Item","Group","color","onClick","toColor","placeholder","onChange","kind","map","x","size","Image","src","Content","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.0a08a374.chunk.js","sourcesContent":["import React from \"react\";\nimport DrawableCanvas from \"react-drawable-canvas\";\nimport \"react-bulma-components/dist/react-bulma-components.min.css\";\nimport { Tile, Card, Navbar, Button, Container } from \"react-bulma-components\";\nimport \"./App.css\";\nimport io from \"socket.io-client\";\n\nconst socket = io(\"http://localhost:5000\");\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      canvasAttrs: {\n        brushColor: \"#000000\",\n        lineWidth: 4,\n        canvasStyle: {\n          backgroundColor: \"#FAFAFA\"\n        },\n        clear: false\n      },\n      name: null,\n      otherDrawings: []\n    };\n\n    this.clearCanvas = this.clearCanvas.bind(this);\n    this.addDrawing = this.addDrawing.bind(this);\n    this.submitDrawing = this.submitDrawing.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n    this.handleNameChange = this.handleNameChange.bind(this);\n  }\n  componentDidMount() {\n    socket.on(\"connect\", function() {\n      console.log(\"connection made!\");\n    });\n    socket.on(\"view drawing\", drawing => this.addDrawing(drawing));\n  }\n\n  addDrawing(drawing) {\n    var newDrawing = this.state.otherDrawings.concat(drawing);\n    this.setState({ otherDrawings: newDrawing });\n  }\n\n  toColor(colorName) {\n    const newState = this.state;\n\n    switch (colorName) {\n      case \"red\":\n        newState.canvasAttrs.brushColor = \"#FF0000\";\n        break;\n\n      case \"blue\":\n        newState.canvasAttrs.brushColor = \"#0000FF\";\n        break;\n\n      case \"green\":\n        newState.canvasAttrs.brushColor = \"#00FF00\";\n        break;\n\n      default:\n        newState.canvasAttrs.brushColor = \"#FFFFFF\";\n        break;\n    }\n    newState.canvasAttrs.clear = false;\n    this.setState({ newState });\n    // Actually change the state\n  }\n\n  clearCanvas() {\n    const newState = this.state;\n    newState.canvasAttrs.clear = true;\n    this.setState({ newState });\n  }\n\n  submitDrawing() {\n    const img = document.querySelector(\"canvas\").toDataURL(\"image/png\");\n    const userDrawing = {\n      name: this.state.name,\n      img: img\n    };\n    socket.emit(\"drawing\", userDrawing);\n  }\n\n  handleNameChange(e) {\n    this.setState({ name: e.target.value });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar.Brand position=\"centered\">\n          <Navbar.Item>\n            <strong>CrowdLogo</strong> | Made for COGS 123\n          </Navbar.Item>\n        </Navbar.Brand>\n        <Container>\n          <Button.Group position=\"centered\">\n            <Button color=\"danger\" onClick={() => this.toColor(\"red\")}>\n              Red\n            </Button>\n            <Button color=\"info\" onClick={() => this.toColor(\"blue\")}>\n              Blue\n            </Button>\n            <Button color=\"primary\" onClick={() => this.toColor(\"green\")}>\n              Green\n            </Button>\n            <Button color=\"dark\" onClick={this.toColor}>\n              Black\n            </Button>\n          </Button.Group>\n        </Container>\n        <Container className=\"canvas-container\">\n          <DrawableCanvas {...this.state.canvasAttrs}></DrawableCanvas>\n        </Container>\n\n        <Container>\n          <div className=\"columns is-centered\">\n            <div className=\"column is-one-quarter has-text-centered\">\n              <input\n                className=\"input is-medium name-field\"\n                placeholder=\"Your name\"\n                value={this.state.name}\n                onChange={this.handleNameChange}\n              ></input>\n            </div>\n          </div>\n        </Container>\n        <Button.Group position=\"centered\">\n          <Button onClick={this.clearCanvas}>Clear</Button>\n          <Button color=\"dark\" onClick={this.submitDrawing}>\n            Submit\n          </Button>\n        </Button.Group>\n        <Tile kind=\"ancestor\" className=\"drawings-container\">\n          {this.state.otherDrawings.map(x => (\n            <Tile kind=\"child\" size={3} className=\"drawing-tile\">\n              <Card>\n                <Card.Image size=\"1by1\" src={x.img}></Card.Image>\n                <Card.Content>\n                  A work of art by <strong>{x.name}</strong>\n                </Card.Content>\n              </Card>\n            </Tile>\n          ))}\n        </Tile>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}